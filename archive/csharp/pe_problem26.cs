using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Oyster.Math;

namespace ProjectEuler {
    public class Problem26 {
        
        internal static int LengthOfSequence(decimal testInput){
            return LengthOfSequence(SplitDecimal(testInput));
        }
        
        internal static int LengthOfSequence(int[] testInput) {
            int inputLen = testInput.Length;
            for (int sequenceLen = 1; sequenceLen < inputLen; ++sequenceLen) {
                for (int test = 0; test < inputLen - sequenceLen; ++test) {
                    if (testInput[test] != testInput[test + sequenceLen])
                        break;

                    if (test == inputLen - (sequenceLen + 1))
                        return sequenceLen;
                }
            }
            return inputLen > 1 ? LengthOfSequence(Trim(testInput)) : 0;
        }
        
       
        private static int[] Trim(int[] toTrim) {
            int[] result = new int[toTrim.Length - 1];
            for (int i = 1; i < toTrim.Length; ++i)
                result[i - 1] = toTrim[i];
            return result;
        }

        internal static int[] SplitDecimal(decimal a) {
            List<int> l = new List<int>();
            decimal x = a - (int)a;
            while (x > 0) {
                x = x * 10;
                l.Add((int)x);
                x = x - (int)x;
            }
            if (l.Count > 15)
                l.RemoveAt(l.Count - 1);
            return l.ToArray();
        }

        public static void run() {
            int maxSequenceLen = 0;
            int NUM_FIELDS = 2000;
            IntX digits = 1;
            for (int i = 0; i< NUM_FIELDS; ++i)
                digits *= 10;

            for (int i = 1; i < 1000; ++i) {
                int[] a = SplitInt(digits / i);

                int len = LengthOfSequence(a);
                if (len > maxSequenceLen && len < NUM_FIELDS/ 2) {
                    maxSequenceLen = len;
                    Console.WriteLine("New max sequence len {0}, generated by 1/{1}",
                        maxSequenceLen, i);
                }
            }
            Console.WriteLine("Done.");
        }


        public static void runOld() {
            int maxSequenceLen = 0;
            for (int x = 1; x <= 100; ++x) {
                decimal toTest = 1.0m / x;
                int[] a = SplitDecimal(toTest);
                int len = LengthOfSequence(toTest);
                if (len > maxSequenceLen) {
                    maxSequenceLen = len;
                    Console.WriteLine("New max sequence len {0}, generated by 1/{1} = {2}", 
                        maxSequenceLen, x, toTest);
                }
            }
        }

        internal static int[] SplitInt(Oyster.Math.IntX x) {
            string str = x.ToString();
            int[] res = new int[str.Length];
            int idx = 0;

            foreach (char c in str)
                res[idx++] = c - '0';

            return res;    
        }
    }
}
